---

1. Estructura de Carpetas del Proyecto

Puedes crear la estructura del proyecto con este comando en tu terminal:

mkdir -p habit-pro/{client,server,database}

Resultado:

habit-pro/
├── client/        # Frontend React
├── server/        # Backend Flask
└── database/      # Scripts y modelos de base de datos


---

2. Backend con Flask (servidor básico)

a) Instala las dependencias

pip install flask flask-cors flask-sqlalchemy

b) Código de server/app.py

from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

app = Flask(_name_)
CORS(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../database/habitos.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Habito(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)
    frecuencia = db.Column(db.String(50))
    categoria = db.Column(db.String(50))
    dias = db.Column(db.String(200))

@app.route('/habits', methods=['POST'])
def agregar_habito():
    data = request.json
    nuevo_habito = Habito(
        nombre=data['nombre'],
        frecuencia=data['frecuencia'],
        categoria=data['categoria'],
        dias=','.join(data['dias'])
    )
    db.session.add(nuevo_habito)
    db.session.commit()
    return jsonify({'mensaje': 'Hábito guardado exitosamente'})

@app.route('/habits', methods=['GET'])
def obtener_habitos():
    habitos = Habito.query.all()
    resultado = []
    for h in habitos:
        resultado.append({
            'id': h.id,
            'nombre': h.nombre,
            'frecuencia': h.frecuencia,
            'categoria': h.categoria,
            'dias': h.dias.split(',')
        })
    return jsonify(resultado)

if _name_ == '_main_':
    db.create_all()
    app.run(debug=True)


---

3. Base de Datos SQLite

El archivo habitos.db se creará automáticamente dentro de la carpeta database/ al ejecutar el backend. Asegúrate de que esa carpeta exista.
  ---


1. Crear Proyecto React en la Carpeta /client

Abrimos la terminal en la carpeta del proyecto luego de eso ejecutamos 

cd client
npx create-react-app .
npm install axios


---

2. Crear Componente HabitForm.jsx

Se crea la carpeta src/components/ y dentro, el archivo HabitForm.jsx con este contenido

// client/src/components/HabitForm.jsx
import React, { useState } from 'react';
import axios from 'axios';

const HabitForm = () => {
  const [form, setForm] = useState({
    nombre: '',
    frecuencia: '',
    categoria: '',
    dias: []
  });

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleCheckbox = e => {
    const value = e.target.value;
    setForm(prev => ({
      ...prev,
      dias: prev.dias.includes(value)
        ? prev.dias.filter(d => d !== value)
        : [...prev.dias, value]
    }));
  };

  const handleSubmit = async e => {

SEMANA 2

1. Conectamos el frontend con el backend para almacenar datos
---

2. Implementamos el formulario de hábitos

se crea el componente HabitForm.jsx:

// client/src/components/HabitForm.jsx
import React, { useState } from 'react';
import axios from 'axios';

const HabitForm = () => {
  const [form, setForm] = useState({
    nombre: '',
    frecuencia: '',
    categoria: '',
    dias: []
  });

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleCheckbox = e => {
    const value = e.target.value;
    setForm(prev => ({
      ...prev,
      dias: prev.dias.includes(value)
        ? prev.dias.filter(d => d !== value)
        : [...prev.dias, value]
    }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:5000/habits', form);
      alert('¡Hábito guardado!');
    } catch (error) {
      console.error('Error al guardar el hábito:', error);
      alert('Error al guardar el hábito.');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        name="nombre"
        placeholder="Nombre del hábito"
        onChange={handleChange}
        required
      />
      <input
        name="frecuencia"
        placeholder="Frecuencia"
        onChange={handleChange}
      />
      <input
        name="categoria"
        placeholder="Categoría"
        onChange={handleChange}
      />
      <div>
        {['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'].map(dia => (
          <label key={dia}>
            <input
              type="checkbox"
              value={dia}
              onChange={handleCheckbox}
            />
            {dia}
          </label>
        ))}
      </div>
      <button type="submit">Guardar Hábito</button>
    </form>
  );
};

export default HabitForm;


---

3. Probamps que los datos se guardan en la base de datos

ya de ahi igresamos un nuevo hábito desde el formulario.

se verifica en la terminal Flask que el hábito fue recibido.

confirmamos en la base de datos SQLite (habitos.db) que el hábito aparece en la tabla.


Front → Axios → Flask → SQLAlchemy → SQLite → Guardado.


---

SEMANA 3 

1. Integramos los Recharts en React

ya de ahi instalamos Recharts:

npm install recharts


---

2. Creamos el componente de gráficos de hábitos

se el archivo HabitCharts.jsx:

// client/src/components/HabitCharts.jsx
import React, { useEffect, useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import axios from 'axios';

const HabitCharts = () => {
  const [habits, setHabits] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/habits')
      .then(response => setHabits(response.data))
      .catch(error => console.error(error));
  }, []);

  // Simulamos cumplimiento (número aleatorio de días cumplidos)
  const data = habits.map(h => ({
    nombre: h.nombre,
    cumplimiento: Math.floor(Math.random() * 7) + 1 // entre 1 y 7 días
  }));

  return (
    <div style={{ width: '100%', height: 300 }}>
      <h2>Gráfica de Cumplimiento de Hábitos</h2>
      <ResponsiveContainer>
        <BarChart data={data}>
          <XAxis dataKey="nombre" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="cumplimiento" fill="#82ca9d" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default HabitCharts;
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/motivacion', methods=['GET'])
def obtener_mensaje_motivacional():
    # Simulación de datos por ahora
    porcentaje_cumplido = 75
    racha = 4

    mensaje = ""
    if porcentaje_cumplido >= 80:
        mensaje = "¡Estás haciendo un trabajo excelente!"
    elif porcentaje_cumplido >= 50:
        mensaje = "¡Vas bien, sigue así!"
    else:
        mensaje = "¡No te rindas, cada pequeño paso cuenta!"

    if racha >= 7:
        mensaje += " ¡Una semana completa, increíble!"
    elif racha >= 3:
        mensaje += " ¡Estás en racha!"

    return jsonify({'mensaje': mensaje})

if __name__ == "__main__":
    app.run(debug=True)
// client/src/components/MotivationalMessage.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { motion } from 'framer-motion';

const MotivationalMessage = () => {
  const [mensaje, setMensaje] = useState('');

  useEffect(() => {
    axios.get('http://localhost:5000/motivacion')
      .then(res => setMensaje(res.data.mensaje))
      .catch(err => console.error('Error al obtener el mensaje:', err));
  }, []);

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="bg-blue-100 p-4 rounded-xl shadow text-blue-800 font-semibold mt-4"
    >
      {mensaje}
    </motion.div>
  );
};

export default MotivationalMessage;
// client/src/App.jsx
import React from 'react';
import HabitForm from './components/HabitForm';
import HabitCharts from './components/HabitCharts';
import MotivationalMessage from './components/MotivationalMessage';

function App() {
  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold mb-4">Habit Pro</h1>
      <MotivationalMessage />
      <HabitForm />
      <HabitCharts />
    </div>
  );
}

export default App;
npm install axios framer-motion

---------------------------------------------------------------ULTIMOS AVANCES DEL PROYECTO----------------------------------------------------------------------- 

APP.PY 

from flask import Flask, render_template, request, redirect, url_for, flash
import sqlite3
from datetime import date
import random  

app = Flask(__name__)
app.secret_key = 'tu_clave_secreta_aqui'  

def get_db_connection():
    conn = sqlite3.connect('habits.db')
    conn.row_factory = sqlite3.Row
    return conn

def query_db(query, args=(), one=False):
    conn = get_db_connection()
    cur = conn.execute(query, args)
    rv = cur.fetchall()
    cur.close()
    conn.commit()
    conn.close()
    return (rv[0] if rv else None) if one else rv

# mensajes motivacionales
motivational_messages = [
    "¡Sigue así, vas por buen camino! 💫",
    "Cada paso cuenta. ¡Buen trabajo! 🚀",
    "¡Estás construyendo una mejor versión de ti! 🌱",
    "¡Nunca subestimes el poder de la constancia! 🔥",
    "¡Tú puedes con todo! 💪",
    "¡Hoy también sumaste! 🧡",
    "¡Tu esfuerzo está dando frutos! 🍀"
]

@app.route('/')
def index():
    habits = query_db('SELECT * FROM habits ORDER BY id DESC')
    logs = query_db('SELECT habit_id, date FROM habit_logs')
    habit_progress = {}
    for log in logs:
        habit_progress.setdefault(log['habit_id'], []).append(log['date'])
    return render_template('index.html', habits=habits, habit_progress=habit_progress)

@app.route('/add', methods=['POST'])
def add_habit():
    name = request.form['name']
    description = request.form.get('description', '')
    frequency = request.form['frequency']
    start_date = request.form['start_date']

    if not name or not frequency or not start_date:
        flash('Por favor completa todos los campos obligatorios.')
        return redirect(url_for('index'))

    query_db('INSERT INTO habits (name, description, frequency, start_date) VALUES (?, ?, ?, ?)',
             (name, description, frequency, start_date))
    frase = random.choice(motivational_messages)
    flash(f'¡Hábito "{name}" agregado con éxito! 🎉 {frase}')
    return redirect(url_for('index'))

@app.route('/complete/<int:habit_id>', methods=['POST'])
def complete_habit(habit_id):
    today = date.today().isoformat()
    existing = query_db('SELECT * FROM habit_logs WHERE habit_id = ? AND date = ?', (habit_id, today), one=True)
    if existing:
        flash('Ya marcaste este hábito como completado hoy 😊')
    else:
        query_db('INSERT INTO habit_logs (habit_id, date) VALUES (?, ?)', (habit_id, today))
        frase = random.choice(motivational_messages)
        flash(f'¡Hábito marcado como completado hoy! 💪 {frase}')
    return redirect(url_for('index'))

@app.route('/delete/<int:habit_id>', methods=['POST'])
def delete_habit(habit_id):
    query_db('DELETE FROM habit_logs WHERE habit_id = ?', (habit_id,))
    query_db('DELETE FROM habits WHERE id = ?', (habit_id,))
    flash('Hábito eliminado correctamente 🗑️')
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)

INDEX.HTML 

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <title>Mis Hábitos</title>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka+One&family=Poppins:wght@500&display=swap" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%);
            margin: 0;
            padding: 20px;
            color: #222;
        }
        header h1 {
            font-family: 'Fredoka One', cursive;
            text-align: center;
            color: white;
            margin-bottom: 20px;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.3);
        }
        .hero-image {
            display: block;
            max-width: 300px;
            margin: 0 auto 30px auto;
            border-radius: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        .form-container {
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            max-width: 600px;
            margin: 0 auto 30px auto;
            border-radius: 15px;
            box-shadow: 0 6px 15px rgba(0,0,0,0.1);
        }
        input[type="text"],
        textarea,
        select,
        input[type="date"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0 15px 0;
            border: 2px solid #66a6ff;
            border-radius: 10px;
            font-size: 1rem;
            font-family: 'Poppins', sans-serif;
        }
        button[type="submit"] {
            background-color: #ff6f91;
            color: white;
            font-weight: 600;
            border: none;
            padding: 12px 25px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: background-color 0.3s ease;
        }
        button[type="submit"]:hover {
            background-color: #ff4c6d;
        }
        .flash-messages {
            max-width: 600px;
            margin: 0 auto 20px auto;
            padding: 10px;
            border-radius: 10px;
            background-color: #ffefc4;
            color: #665200;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .habit-list {
            max-width: 600px;
            margin: 0 auto 40px auto;
        }
        .habit {
            background: rgba(255,255,255,0.9);
            padding: 15px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        .habit h3 {
            margin-top: 0;
            font-family: 'Fredoka One', cursive;
            color: #66a6ff;
        }
        .habit p {
            font-size: 0.95rem;
            margin: 5px 0 15px 0;
        }
        .habit form {
            display: inline-block;
            margin-right: 10px;
        }
        .habit button {
            padding: 8px 12px;
            font-size: 0.9rem;
            border-radius: 12px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s ease;
        }
        .habit button[type="submit"].complete-btn {
            background-color: #4caf50;
            color: white;
        }
        .habit button[type="submit"].complete-btn:hover {
            background-color: #388e3c;
        }
        .habit button[type="submit"].delete-btn {
            background-color: #ff4d4d;
            color: white;
        }
        .habit button[type="submit"].delete-btn:hover {
            background-color: #cc0000;
        }
        canvas {
            max-width: 100%;
            margin-top: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        footer {
            text-align: center;
            font-weight: 600;
            color: white;
            text-shadow: 1px 1px 4px rgba(0,0,0,0.3);
            margin-top: 40px;
            font-size: 1.1rem;
        }
        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
            .form-container, .habit-list {
                width: 100%;
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>🌟 Mis Hábitos 🌟</h1>
    </header>

    <img class="hero-image" src="https://cdn.pixabay.com/photo/2020/05/22/07/08/success-5206174_960_720.png" alt="Imagen motivacional" />

    <div class="form-container">
        <form action="/add" method="POST">
            <input type="text" name="name" placeholder="Nombre del hábito" required />
            <textarea name="description" placeholder="Descripción" rows="3"></textarea>
            <select name="frequency" required>
                <option value="">Frecuencia</option>
                <option value="Diario">Diario</option>
                <option value="Semanal">Semanal</option>
                <option value="Mensual">Mensual</option>
            </select>
            <input type="date" name="start_date" required />
            <button type="submit">💖 Agregar Hábito 💪</button>
        </form>
    </div>

    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <div class="flash-messages">
          <ul>
            {% for message in messages %}
              <li>{{ message }}</li>
            {% endfor %}
          </ul>
        </div>
      {% endif %}
    {% endwith %}

    <div class="habit-list">
        {% for habit in habits %}
            <div class="habit">
                <h3>{{ habit.name }}</h3>
                <p>{{ habit.description }}</p>
                <form action="/complete/{{ habit.id }}" method="POST" style="display:inline;">
                    <button type="submit" class="complete-btn">✅ Completar</button>
                </form>
                <form action="/delete/{{ habit.id }}" method="POST" style="display:inline;">
                    <button type="submit" class="delete-btn" onclick="return confirm('¿Seguro que quieres eliminar este hábito?');">🗑️ Eliminar</button>
                </form>

                <!-- aqui ponemos un canvas para la gráfica -->
                <canvas id="chart-{{ habit.id }}" width="400" height="150"></canvas>
                <script>
                    const ctx{{ habit.id }} = document.getElementById('chart-{{ habit.id }}').getContext('2d');
                    const data{{ habit.id }} = {
                        labels: [
                            {% if habit_progress[habit.id] is defined %}
                                {% for d in habit_progress[habit.id] %}
                                    "{{ d }}",
                                {% endfor %}
                            {% else %}
                                "No data"
                            {% endif %}
                        ],
                        datasets: [{
                            label: 'Días completados',
                            data: [
                                {% if habit_progress[habit.id] is defined %}
                                    {% for d in habit_progress[habit.id] %}
                                        1,
                                    {% endfor %}
                                {% else %}
                                    0
                                {% endif %}
                            ],
                            backgroundColor: 'rgba(255, 159, 128, 0.7)'

                        }]
                    };
                    new Chart(ctx{{ habit.id }}, {
                        type: 'bar',
                        data: data{{ habit.id }},
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 1,
                                    ticks: { stepSize: 1 }
                                }
                            },
                            plugins: {
                                legend: { display: false }
                            }
                        }
                    });
                </script>
            </div>
        {% endfor %}
    </div>

    <footer>
        Made with by Gabriela y Andrey
    </footer>
</body>
</html>

INIT_DB.PY

import sqlite3

conn = sqlite3.connect('habits.db')
cursor = conn.cursor()

# crear tabla habitos
cursor.execute('''
CREATE TABLE IF NOT EXISTS habits (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
)
''')

# crear tabla logs de habitos
cursor.execute('''
CREATE TABLE IF NOT EXISTS habit_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    habit_id INTEGER NOT NULL,
    date TEXT NOT NULL,
    FOREIGN KEY (habit_id) REFERENCES habits (id)
)
''')

# poner ejemplos de habitos si no existen
cursor.execute('SELECT COUNT(*) FROM habits')
count = cursor.fetchone()[0]
if count == 0:
    cursor.executemany('INSERT INTO habits (name) VALUES (?)', [
        ('Dormir temprano',),
        ('Beber agua',),
        ('Ejercicio',),
    ])

conn.commit()
conn.close()
print("Base de datos inicializada.")

DATABASE.PY

import sqlite3

def get_db_connection():
    conn = sqlite3.connect('habits.db')
    conn.row_factory = sqlite3.Row  # Para acceder a los datos como un diccionario
    return conn





