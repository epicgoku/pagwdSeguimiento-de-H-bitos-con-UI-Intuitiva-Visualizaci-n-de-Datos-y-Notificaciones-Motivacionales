---

1. Estructura de Carpetas del Proyecto

Puedes crear la estructura del proyecto con este comando en tu terminal:

mkdir -p habit-pro/{client,server,database}

Resultado:

habit-pro/
├── client/        # Frontend React
├── server/        # Backend Flask
└── database/      # Scripts y modelos de base de datos


---

2. Backend con Flask (servidor básico)

a) Instala las dependencias

pip install flask flask-cors flask-sqlalchemy

b) Código de server/app.py

from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

app = Flask(_name_)
CORS(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../database/habitos.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Habito(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)
    frecuencia = db.Column(db.String(50))
    categoria = db.Column(db.String(50))
    dias = db.Column(db.String(200))

@app.route('/habits', methods=['POST'])
def agregar_habito():
    data = request.json
    nuevo_habito = Habito(
        nombre=data['nombre'],
        frecuencia=data['frecuencia'],
        categoria=data['categoria'],
        dias=','.join(data['dias'])
    )
    db.session.add(nuevo_habito)
    db.session.commit()
    return jsonify({'mensaje': 'Hábito guardado exitosamente'})

@app.route('/habits', methods=['GET'])
def obtener_habitos():
    habitos = Habito.query.all()
    resultado = []
    for h in habitos:
        resultado.append({
            'id': h.id,
            'nombre': h.nombre,
            'frecuencia': h.frecuencia,
            'categoria': h.categoria,
            'dias': h.dias.split(',')
        })
    return jsonify(resultado)

if _name_ == '_main_':
    db.create_all()
    app.run(debug=True)


---

3. Base de Datos SQLite

El archivo habitos.db se creará automáticamente dentro de la carpeta database/ al ejecutar el backend. Asegúrate de que esa carpeta exista.
  ---


1. Crear Proyecto React en la Carpeta /client

Abrimos la terminal en la carpeta del proyecto luego de eso ejecutamos 

cd client
npx create-react-app .
npm install axios


---

2. Crear Componente HabitForm.jsx

Se crea la carpeta src/components/ y dentro, el archivo HabitForm.jsx con este contenido

// client/src/components/HabitForm.jsx
import React, { useState } from 'react';
import axios from 'axios';

const HabitForm = () => {
  const [form, setForm] = useState({
    nombre: '',
    frecuencia: '',
    categoria: '',
    dias: []
  });

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleCheckbox = e => {
    const value = e.target.value;
    setForm(prev => ({
      ...prev,
      dias: prev.dias.includes(value)
        ? prev.dias.filter(d => d !== value)
        : [...prev.dias, value]
    }));
  };

  const handleSubmit = async e => {

SEMANA 2

1. Conectamos el frontend con el backend para almacenar datos
---

2. Implementamos el formulario de hábitos

se crea el componente HabitForm.jsx:

// client/src/components/HabitForm.jsx
import React, { useState } from 'react';
import axios from 'axios';

const HabitForm = () => {
  const [form, setForm] = useState({
    nombre: '',
    frecuencia: '',
    categoria: '',
    dias: []
  });

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleCheckbox = e => {
    const value = e.target.value;
    setForm(prev => ({
      ...prev,
      dias: prev.dias.includes(value)
        ? prev.dias.filter(d => d !== value)
        : [...prev.dias, value]
    }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:5000/habits', form);
      alert('¡Hábito guardado!');
    } catch (error) {
      console.error('Error al guardar el hábito:', error);
      alert('Error al guardar el hábito.');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        name="nombre"
        placeholder="Nombre del hábito"
        onChange={handleChange}
        required
      />
      <input
        name="frecuencia"
        placeholder="Frecuencia"
        onChange={handleChange}
      />
      <input
        name="categoria"
        placeholder="Categoría"
        onChange={handleChange}
      />
      <div>
        {['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'].map(dia => (
          <label key={dia}>
            <input
              type="checkbox"
              value={dia}
              onChange={handleCheckbox}
            />
            {dia}
          </label>
        ))}
      </div>
      <button type="submit">Guardar Hábito</button>
    </form>
  );
};

export default HabitForm;


---

3. Probamps que los datos se guardan en la base de datos

ya de ahi igresamos un nuevo hábito desde el formulario.

se verifica en la terminal Flask que el hábito fue recibido.

confirmamos en la base de datos SQLite (habitos.db) que el hábito aparece en la tabla.


Front → Axios → Flask → SQLAlchemy → SQLite → Guardado.


---

SEMANA 3 

1. Integramos los Recharts en React

ya de ahi instalamos Recharts:

npm install recharts


---

2. Creamos el componente de gráficos de hábitos

se el archivo HabitCharts.jsx:

// client/src/components/HabitCharts.jsx
import React, { useEffect, useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import axios from 'axios';

const HabitCharts = () => {
  const [habits, setHabits] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/habits')
      .then(response => setHabits(response.data))
      .catch(error => console.error(error));
  }, []);

  // Simulamos cumplimiento (número aleatorio de días cumplidos)
  const data = habits.map(h => ({
    nombre: h.nombre,
    cumplimiento: Math.floor(Math.random() * 7) + 1 // entre 1 y 7 días
  }));

  return (
    <div style={{ width: '100%', height: 300 }}>
      <h2>Gráfica de Cumplimiento de Hábitos</h2>
      <ResponsiveContainer>
        <BarChart data={data}>
          <XAxis dataKey="nombre" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="cumplimiento" fill="#82ca9d" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default HabitCharts;


---


